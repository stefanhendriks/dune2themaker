{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1043\deflangfe1043{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Times New Roman};}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Times New Roman};}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Times New Roman};}
{\f39\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Times New Roman};}{\f40\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Times New Roman};}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew){\*\falt Times New Roman};}
{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic){\*\falt Times New Roman};}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Times New Roman};}{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese){\*\falt Times New Roman};}
{\f56\fmodern\fcharset238\fprq1 Courier New CE;}{\f57\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f59\fmodern\fcharset161\fprq1 Courier New Greek;}{\f60\fmodern\fcharset162\fprq1 Courier New Tur;}{\f61\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f62\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f63\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f64\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1043\langfe1043\cgrid\langnp1043\langfenp1043 \snext0 Normal;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\rsidtbl \rsid219155\rsid544233
\rsid596572\rsid740478\rsid752073\rsid986566\rsid1142827\rsid1406390\rsid1466135\rsid1729496\rsid2173559\rsid2244348\rsid2256135\rsid2439262\rsid2906260\rsid3409911\rsid3609167\rsid3744584\rsid4156247\rsid4549285\rsid4605355\rsid4728445\rsid4803635
\rsid4915547\rsid5005398\rsid5265816\rsid5462904\rsid5513029\rsid5837880\rsid5839309\rsid5969756\rsid6038729\rsid6056205\rsid6121637\rsid6634060\rsid6754716\rsid6755427\rsid6902197\rsid7042530\rsid7145227\rsid7346032\rsid7410862\rsid7431677\rsid7495392
\rsid7678627\rsid7740190\rsid7826560\rsid8061233\rsid8076197\rsid8086528\rsid9331048\rsid9506468\rsid9646915\rsid11083380\rsid11098404\rsid11229908\rsid11285754\rsid11364104\rsid11412340\rsid11550955\rsid11557774\rsid12070033\rsid12131466\rsid13138432
\rsid13244906\rsid13776571\rsid14037325\rsid14095518\rsid14299713\rsid14355539\rsid14446107\rsid14568985\rsid14811660\rsid14897690\rsid14901252\rsid15742903\rsid15880416\rsid15943803\rsid16153553\rsid16261069\rsid16284106\rsid16348320\rsid16522584
\rsid16726480}{\*\generator Microsoft Word 11.0.5604;}{\info{\title MultiMediaEngine}{\subject Description of MME}{\author S. Hendriks}{\operator S. Hendriks}{\creatim\yr2006\mo9\dy12\hr13\min51}{\revtim\yr2006\mo9\dy12\hr21\min50}{\version86}{\edmins79}
{\nofpages2}{\nofwords521}{\nofchars2868}{\nofcharsws3383}{\vern24689}}\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1417 
\deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1417\dgvorigin1417\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale120\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot14095518\newtblstyruls\nogrowautofit \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1043\langfe1043\cgrid\langnp1043\langfenp1043 {\b\lang2057\langfe1043\langnp2057\insrsid14095518\charrsid6902197 MultiMediaEngine}{
\b\lang2057\langfe1043\langnp2057\insrsid14568985\charrsid6902197  Wrapper for D2TM}{\b\lang2057\langfe1043\langnp2057\insrsid5839309\charrsid6902197 
\par }{\lang2057\langfe1043\langnp2057\insrsid14095518\charrsid6902197 
\par }{\fs22\lang2057\langfe1043\langnp2057\insrsid14095518\charrsid6902197 Introduction
\par }{\fs20\lang2057\langfe1043\langnp2057\insrsid14095518\charrsid6902197 D2TM is becomming more and more an \lquote rts engine\rquote  with a primary focus on the Dune scene. }{\fs20\insrsid14095518\charrsid3409911 
Nevertheless the possibilities of the engine in moddability, portability, etc is also of importance. 
\par 
\par Being able to run the game running using any \lquote low level\rquote 
 library, it would mean in theory that you can run the game on Linux, with Allegro or with SDL. Or, perhaps some day we want to use 3D and the game will be using new functions on top of the standard layer, therefor not breaking compatibility.
\par 
\par In short; the game will be multi-platform in a broader sense then \'93OS\rquote s\'94. The game should be able to run, even with your preferred library. Perhaps you find Library A better then Library B and you don\rquote t feel lik
e writing an entire RTS just because of that. Now, all you have to do is write your own implementation of an existing layer\'85 the MultiMediaEngine.}{\fs20\insrsid7346032  Would\rquote nt it be cool that this game would run on a PSP?
\par }{\fs20\insrsid6634060 
\par (NOTE: This document takes Allegro as perspective, since this library is used at start to write the }{\fs20\insrsid2439262 program}{\fs20\insrsid6634060 )}{\fs20\insrsid6634060\charrsid3409911 
\par }{\fs20\insrsid8076197\charrsid3409911 
\par }{\b\insrsid6056205 Wrapping via the}{\b\insrsid14811660  MultiMediaEngine}{\b\insrsid5837880  (MME)}{\insrsid14095518 
\par }{\fs20\insrsid8076197 The goal is to have a MultiMediaEngine tha}{\fs20\insrsid7495392 t has no implimentation itself, its implementation is being done by who (you) writes the wrapper for library x,y, z, etc.}{\fs20\insrsid14095518 
\par }{\fs20\insrsid8076197 
\par }{\f2\fs16\insrsid3609167\charrsid3609167 // the pointer to our MultiMediaEngine, being set up by install()
\par }{\f2\fs16\insrsid12131466\charrsid1142827 c}{\f2\fs16\insrsid8076197\charrsid1142827 lass MultiMediaEngine *mme;
\par }{\fs20\insrsid1466135 
\par }{\f2\fs16\insrsid3609167\charrsid3609167 // Your own wrapper
\par }{\f2\fs16\insrsid1466135\charrsid1142827 class myWrapper : public MultiMediaEngine \{
\par  //  your implementation
\par \};
\par }{\fs20\insrsid1466135 
\par }{\fs20\insrsid13138432 The MultiMediaEngine is being set up in the }{\i\fs20\insrsid13138432\charrsid14446107 install()}{\fs20\insrsid13138432  function called in }{\b\fs20\insrsid13138432\charrsid14446107 main.cpp}{\fs20\insrsid13138432 
 and being deleted in the }{\i\fs20\insrsid13138432\charrsid14446107 shutdown()}{\fs20\insrsid13138432  function.}{\fs20\insrsid7678627 
\par }{\fs20\insrsid14811660 
\par }{\b\fs22\insrsid11550955\charrsid11550955 Defining your Library
\par }{\fs20\insrsid11550955 In the MultiMediaEngine header file you specify what library is used by using the #define macro.
\par 
\par }{\f2\fs16\insrsid11550955\charrsid4156247 #define LIB_ALLEGRO}{\f2\fs16\insrsid11285754\charrsid4156247 \tab true}{\f2\fs16\insrsid11550955\charrsid4156247 
\par }{\fs20\insrsid4156247 
\par In the main.cpp file , the correct pointer will be installed then via:
\par 
\par }{\f2\fs16\insrsid6038729 i}{\f2\fs16\insrsid4156247\charrsid4156247 f (LIB_ALLEGRO) \{
\par }\pard \ql \fi708\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4156247 {\f2\fs16\insrsid4156247\charrsid4156247 mme = new MMEAllegro();}{\f2\fs16\insrsid4549285\charrsid4156247 
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f2\fs16\insrsid4156247\charrsid4156247 \}}{\f2\fs16\insrsid544233  // more if/switch statements for libs ...}{\f2\fs16\insrsid986566 
\par }{\f2\fs16\insrsid544233 else \{}{\f2\fs16\insrsid11229908 
\par }\pard \ql \fi708\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11229908 {\f2\fs16\insrsid11229908 // no lib installed, failed
\par }{\f2\fs16\insrsid14037325 return false;
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f2\fs16\insrsid544233 \}
\par }{\f2\fs16\insrsid15943803 
\par }{\f2\fs16\insrsid11098404 // this function will do a self-check, so we can bail out if something is wrong
\par // before-hand.
\par }{\f2\fs16\insrsid13776571 if (!}{\f2\fs16\insrsid15943803 mme.}{\f2\fs16\insrsid13776571 readyToContinue}{\f2\fs16\insrsid15943803 ()}{\f2\fs16\insrsid13776571 ) \{
\par }\pard \ql \fi708\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1406390 {\f2\fs16\insrsid13776571 return false;}{\f2\fs16\insrsid15943803 
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f2\fs16\insrsid13776571 \}}{\f2\fs16\insrsid13776571\charrsid4156247 
\par }{\fs20\insrsid4156247 
\par }{\b\fs22\insrsid8086528 Graphic drawing}{\fs22\insrsid14811660 
\par }{\fs20\insrsid6634060 Drawing is done on a surface. }{\fs20\insrsid5265816 In Allegro this is called a BITMAP. }{\fs20\insrsid14901252 Perhaps in some other library it is called PIECEOFPAPER. Whatever it is called; its use is essential for drawi
ng things on screen. The game uses double buffering, so atleast one buffer is created to draw everything on, which is then blitteed to the screen. This ensures smooth movement, no need to wait for vsync. Etc.}{\fs20\insrsid5837880  
\par 
\par The MME calls everything you draw on a SURFACE. You specify this SURFACE }{\fs20\insrsid7826560 in the header file of the MME. Depending on the library you want to use, the correct SURFACE is used.}{\fs20\insrsid5837880 
\par }{\fs20\insrsid7826560 
\par Example:\line }{\f2\fs16\insrsid7410862\charrsid14299713 #ifdef LIB_ALLEGRO
\par }\pard \ql \fi708\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid7145227 {\f2\fs16\insrsid7826560\charrsid14299713 #define SURFACE\tab BITMAP}{\f2\fs16\insrsid7740190\charrsid14299713 *}{
\f2\fs16\insrsid7826560\charrsid14299713 \tab // make sure SURFACE uses the Allegro BITMAP
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f2\fs16\insrsid7410862\charrsid14299713 #elif LIB_SDL}{\f2\fs16\insrsid8061233\charrsid14299713 
\par }\pard \ql \fi708\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid7145227 {\f2\fs16\insrsid7410862\charrsid14299713 #define SURFACE\tab \'85
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f2\fs16\insrsid7410862\charrsid14299713 #end
\par }{\fs20\insrsid7410862 
\par }{\fs20\insrsid544233 If you have no LIB specified, the install would fail}{\fs20\insrsid7431677  for sure. }{\fs20\insrsid544233 
\par 
\par }{\b\fs22\insrsid8086528\charrsid8086528 Sounds
\par }{\fs20\insrsid2244348 As you have a SURFACE to draw on. You}{\fs20\insrsid4803635  h}{\fs20\insrsid15880416 ave a CHANNEL to play sounds. }{\fs20\insrsid4728445 A CHANNEL is define}{\fs20\insrsid14355539 d exactly where the SURFACE is.}{
\fs20\insrsid15742903  }{\fs20\insrsid9506468 
\par }{\b\fs20\insrsid16522584\charrsid16522584 
\par }{\b\fs22\insrsid8086528\charrsid8086528 Music
\par }{\fs20\insrsid16348320 Music is played through a stream. The stream can contain a MP3 file, WAVE. But even MIDI can be played. (depending on the library that is).}{\fs20\insrsid3744584 
\par }{\fs20\insrsid11412340 
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11412340 {\b\fs22\insrsid11412340 Keyboard control}{\b\fs22\insrsid11412340\charrsid8086528 
\par }{\fs20\insrsid11412340 The keyboard controls are read directly from the given map (if available) from the library used. It merely consists of an array with key indexes which return true if the key is pressed:
\par 
\par If (key[KEY_LEFT]) \{
\par  // left key pressed
\par \}}{\fs20\insrsid11412340\charrsid4915547 
\par }}